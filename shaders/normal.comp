#version 460

layout(local_size_x = 1, local_size_y = 1) in;

// layout(set = 0, binding = 0) uniform Params {
// };
layout(set = 0, binding = 1) uniform texture2D t_Color1;
layout(set = 0, binding = 2) uniform sampler Sampler;
layout(set = 0, binding = 3, rgba16f) uniform image2D t_Out;

float fetch_height(ivec2 texel) {
    ivec2 resolution = imageSize(t_Out);
    vec2 uv = vec2(float(texel.x) / float(resolution.x), float(texel.y) / float(resolution.y));
    return textureLod(sampler2D(t_Color1, Sampler), uv, 0).r;
}

float matrix_sum(mat3 matrix) {
    float sum = 0.;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            sum += matrix[i][j];
        }
    }

    return sum;
}

vec3 normal_sobel(ivec2 texel) {
    int d = 1;

    mat3 neighborhood =
        mat3(fetch_height(texel + ivec2(-d,-d)),
             fetch_height(texel + ivec2(0 ,-d)),
             fetch_height(texel + ivec2(d ,-d)),
             fetch_height(texel + ivec2(-d, 0)),
             fetch_height(texel + ivec2(0 , 0)),
             fetch_height(texel + ivec2(d , 0)),
             fetch_height(texel + ivec2(-d, d)),
             fetch_height(texel + ivec2(0 , d)),
             fetch_height(texel + ivec2( d, d)));

    vec3 hill = vec3(1., 2., 1.);
    vec3 slope = vec3(1., 0., - 1.);

    float gX = dot(hill, slope * neighborhood);
    float gY = dot(slope, hill * neighborhood);
    float gZ = sqrt(1.0 - (gX * gX + gY * gY));

    return normalize(vec3(gX, gY, 1));
}

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec3 normal = normal_sobel(idx);
    normal = vec3(normal.rg * 0.5 + 0.5, normal.b);
    imageStore(t_Out, idx, vec4(normal, 1.));
}
