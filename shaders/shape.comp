#version 460

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Params {
    vec2 translation;
    float theta;
    uint mirror_x;
    uint mirror_y;
    uint shape;
    uint shell;
    float radius;
    float width;
    float height;
    float angle_factor;
    int sides;
};
layout(set = 0, binding = 1, r32f) uniform image2D t_Out;

const uint SHAPE_CIRCLE = 0;
const uint SHAPE_BOX = 1;
const uint SHAPE_NGON = 2;
const uint SHAPE_STAR = 3;
const uint SHAPE_ELLIPSE = 4;
const float PI = 3.14159265359;

float sd_circle(vec2 p, float r) {
    return length(p) - r;
}

float sd_box(vec2 p, vec2 b) {
    vec2 d = abs(p) - b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}

float sd_ngon(vec2 p, float r, uint n) {
    float an = 6.2831853 / float(n);
    float he = r * tan(0.5 * an);

    // rotate to first sector
    p = -p.yx; // if you want the corner to be up
    float bn = an * floor((atan(p.y, p.x) + 0.5 * an) / an);
    vec2 cs = vec2(cos(bn), sin(bn));
    p = mat2(cs.x, -cs.y, cs.y, cs.x) * p;

    // side of polygon
    return length(p-vec2(r,clamp(p.y,-he,he)))*sign(p.x-r);
}

float sd_ellipse(vec2 p, vec2 ab) {
    p = abs(p);
    if( p.x > p.y ) {
        p = p.yx;
        ab = ab.yx;
    }

    float l = ab.y * ab.y - ab.x * ab.x;
    float m = ab.x * p.x / l;
    float m2 = m * m;
    float n = ab.y * p.y / l;
    float n2 = n * n;
    float c = (m2 + n2 - 1.0) / 3.0;
    float c3 = c * c * c;
    float q = c3 + m2 *n2 * 2.0;
    float d = c3 + m2 *n2;
    float g = m + m * n2;
    float co;

    if(d < 0.0) {
        float h = acos(q / c3) / 3.0;
        float s = cos(h);
        float t = sin(h) * sqrt(3.0);
        float rx = sqrt(-c * (s + t + 2.0) + m2);
        float ry = sqrt(-c * (s - t + 2.0) + m2);
        co = (ry + sign(l) * rx + abs(g) / (rx * ry) - m) / 2.0;
    } else {
        float h = 2.0 * m * n * sqrt(d);
        float s = sign(q + h) * pow(abs(q + h), 1.0 / 3.0);
        float u = sign(q - h) * pow(abs(q - h), 1.0 / 3.0);
        float rx = -s - u - c * 4.0 + 2.0 * m2;
        float ry = (s - u) * sqrt(3.0);
        float rm = sqrt(rx * rx + ry * ry);
        co = (ry / sqrt(rm - rx) + 2.0 * g / rm - m) / 2.0;
    }

    vec2 r = ab * vec2(co, sqrt(1.0 - co * co));
    return length(r-p) * sign(p.y-r.y);
}

float sd_star(vec2 p, float r, int n, float m) {
    float an = PI / float(n);
    float en = PI / m;  // m is between 2 and n
    vec2 acs = vec2(cos(an), sin(an));
    vec2 ecs = vec2(cos(en), sin(en)); // ecs=vec2(0,1) for regular polygon

    float bn = mod(atan(p.x, p.y), 2.0 * an) - an;
    p = length(p) * vec2(cos(bn), abs(sin(bn)));
    p -= r * acs;
    p += ecs * clamp(- dot(p,ecs), 0.0, r * acs.y / ecs.y);

    return length(p) * sign(p.x);
}

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(t_Out);
    vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
    uv -= .5;

    // Mirroring
    if (mirror_x != 0) {
        uv.x = abs(uv.x);
    }
    if (mirror_y != 0) {
        uv.y = abs(uv.y);
    }

    // Transform
    uv -= vec2(translation.x, -translation.y);
    mat2 rot = mat2(vec2(cos(theta), -sin(theta)), vec2(sin(theta), cos(theta)));
    uv = rot * uv;

    // SDF
    float sdf = 0.;

    switch(shape) {
        case SHAPE_CIRCLE:
            sdf = sd_circle(uv, radius);
            break;
        case SHAPE_BOX:
            sdf = sd_box(uv, vec2(width, height));
            break;
        case SHAPE_NGON:
            sdf = sd_ngon(uv, radius, sides);
            break;
        case SHAPE_STAR:
            sdf = sd_star(uv, radius, sides, 2. + angle_factor * angle_factor * (sides - 2.));
            break;
        case SHAPE_ELLIPSE:
            sdf = sd_ellipse(uv, vec2(width, height));
            break;
    }

    if (shell != 0) {
        sdf = abs(sdf);
    }

    imageStore(t_Out, idx, vec4(sdf, sdf, sdf, 1.));
}
