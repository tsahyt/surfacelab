#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Params {
    uint dimensions;
    uint method;
    uint metric;
    float z_coord;
    float exponent;
    int scale;
    float octaves;
    float roughness;
    float randomness;
    float smoothness;
};

layout(set = 0, binding = 1, r32f) uniform image2D t_Distance;
layout(set = 0, binding = 2, rgba16f) uniform image2D t_Color;

const uint METRIC_EUCLIDEAN = 0;
const uint METRIC_MANHATTAN = 1;
const uint METRIC_CHEBYSHEV = 2;
const uint METRIC_MINKOWSKI = 3;

const uint DIMENSIONS_2D = 0;
const uint DIMENSIONS_3D = 1;

const uint METHOD_F1 = 0;
const uint METHOD_F2 = 1;
const uint METHOD_DIST = 2;

vec2 hash22(vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}

vec3 hash32(vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy+p3.yzz)*p3.zyx);
}

vec3 hash33(vec3 p3)
{
    p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);
}

float voronoi_distance(vec2 a, vec2 b) {
    switch (metric) {
        case METRIC_EUCLIDEAN:
            return distance(a, b);
        case METRIC_MANHATTAN:
            return dot(abs(a - b), vec2(1.));
        case METRIC_CHEBYSHEV:
            vec2 c = abs(a - b);
            return max(c.x, c.y);
        case METRIC_MINKOWSKI:
            float d = dot(pow(abs(a - b), vec2(exponent)), vec2(1.));
            return pow(d, 1. / exponent);
        default:
            return 0.;
    }
}

float voronoi_distance(vec3 a, vec3 b) {
    switch (metric) {
        case METRIC_EUCLIDEAN:
            return distance(a, b);
        case METRIC_MANHATTAN:
            return dot(abs(a - b), vec3(1.));
        case METRIC_CHEBYSHEV:
            vec3 c = abs(a - b);
            return max(c.x, c.y);
        case METRIC_MINKOWSKI:
            float d = dot(pow(abs(a - b), vec3(exponent)), vec3(1.));
            return pow(d, 1. / exponent);
        default:
            return 0.;
    }
}

vec2 voronoi_neighbour(vec2 cell, vec2 cell_offset, float scale) {
    return mod(cell + cell_offset + 0.5, scale) - 0.5;
}

vec3 voronoi_neighbour(vec3 cell, vec3 cell_offset, float scale) {
    return vec3(voronoi_neighbour(cell.xy, cell_offset.xy, scale), cell.z + cell_offset.z);
}

vec4 voronoi_3d_f1(vec3 p, float scale) {
    vec3 cell = floor(p);
    vec3 local = fract(p);

    float min_distance = 8.;
    vec3 target;

    for (int k = -1; k <= 1; k++) {
        for (int j = -1; j <= 1; j++) {
            for (int i = -1; i <= 1; i++) {
                vec3 cell_offset = vec3(i, j, k);
                vec3 neighbour = voronoi_neighbour(cell, cell_offset, scale);

                vec3 point_position = cell_offset + hash33(neighbour) * randomness;
                float dist = voronoi_distance(local, point_position);

                if (dist < min_distance) {
                    min_distance = dist;
                    target = neighbour;
                }
            }
        }
    }

    return vec4(hash33(target), min_distance);
}

vec4 voronoi_3d_f2(vec3 p, float scale) {
    vec3 cell = floor(p);
    vec3 local = fract(p);

    float distance_f1 = 8.;
    float distance_f2 = 8.;
    vec3 target_f1, target_f2;

    for (int k = -1; k <= 1; k++) {
        for (int j = -1; j <= 1; j++) {
            for (int i = -1; i <= 1; i++) {
                vec3 cell_offset = vec3(i, j, k);
                vec3 neighbour = voronoi_neighbour(cell, cell_offset, scale);

                vec3 point_position = cell_offset + hash33(neighbour) * randomness;
                float dist = voronoi_distance(local, point_position);

                if (dist < distance_f1) {
                    distance_f2 = distance_f1;
                    distance_f1 = dist;
                    target_f2 = target_f1;
                    target_f1 = neighbour;
                } else if (dist < distance_f2) {
                    distance_f2 = dist;
                    target_f2 = neighbour;
                }
            }
        }
    }

    return vec4(hash33(target_f2), distance_f2);
}

vec4 voronoi_3d_dist(vec3 p, float scale) {
    vec3 cell = floor(p);
    vec3 local = fract(p);

    float min_distance = 8.;
    vec3 target;
    vec3 to_closest;

    for (int k = -1; k <= 1; k++) {
        for (int j = -1; j <= 1; j++) {
            for (int i = -1; i <= 1; i++) {
                vec3 cell_offset = vec3(i, j, k);
                vec3 neighbour = voronoi_neighbour(cell, cell_offset, scale);

                vec3 point_position = cell_offset + hash33(neighbour) * randomness;
                float dist = distance(local, point_position);
                vec3 to_point =
                    cell_offset + hash33(neighbour) * randomness - local;

                if (dist < min_distance) {
                    min_distance = dist;
                    target = neighbour;
                    to_closest = to_point;
                }
            }
        }
    }

    min_distance = 8.;

    for (int k = -1; k <= 1; k++) {
        for (int j = -1; j <= 1; j++) {
            for (int i = -1; i <= 1; i++) {
                vec3 cell_offset = vec3(i, j, k);
                vec3 neighbour = voronoi_neighbour(cell, cell_offset, scale);

                vec3 to_point =
                    cell_offset + hash33(neighbour) * randomness - local;

                vec3 perpendicular_to_edge = to_point - to_closest;

                if(length(perpendicular_to_edge) > 0.0001) {
                    float dist = dot((to_closest + to_point) / 2.,
                                    normalize(perpendicular_to_edge));
                    min_distance = min(min_distance, dist);
                }
            }
        }
    }

    return vec4(hash33(target), min_distance);
}

vec4 voronoi_2d_f1(vec2 p, float scale) {
    vec2 cell = floor(p);
    vec2 local = fract(p);

    float min_distance = 8.;
    vec2 target;

    for (int j = -1; j <= 1; j++) {
        for (int i = -1; i <= 1; i++) {
            vec2 cell_offset = vec2(i, j);
            vec2 neighbour = voronoi_neighbour(cell, cell_offset, scale);
            vec2 point_position = cell_offset + hash22(neighbour) * randomness;

            float dist = voronoi_distance(local, point_position);

            if (dist < min_distance) {
                min_distance = dist;
                target = neighbour;
            }
        }
    }

    return vec4(hash32(target), min_distance);
}

vec4 voronoi_2d_f2(vec2 p, float scale) {
    vec2 cell = floor(p);
    vec2 local = fract(p);

    float distance_f1 = 8.;
    float distance_f2 = 8.;
    vec2 target_f1, target_f2;

    for (int j = -1; j <= 1; j++) {
        for (int i = -1; i <= 1; i++) {
            vec2 cell_offset = vec2(i, j);
            vec2 neighbour = voronoi_neighbour(cell, cell_offset, scale);
            vec2 point_position = cell_offset + hash22(neighbour) * randomness;

            float dist = voronoi_distance(local, point_position);

            if (dist < distance_f1) {
                distance_f2 = distance_f1;
                distance_f1 = dist;
                target_f2 = target_f1;
                target_f1 = neighbour;
            } else if (dist < distance_f2) {
                distance_f2 = dist;
                target_f2 = neighbour;
            }
        }
    }

    return vec4(hash32(target_f2), distance_f2);
}

vec4 voronoi_2d_dist(vec2 p, float scale) {
    vec2 cell = floor(p);
    vec2 local = fract(p);

    float min_distance = 8.;
    vec2 to_closest;
    vec2 target;

    for (int j = -1; j <= 1; j++) {
        for (int i = -1; i <= 1; i++) {
            vec2 cell_offset = vec2(i, j);
            vec2 neighbour = voronoi_neighbour(cell, cell_offset, scale);
            vec2 point_position = cell_offset + hash22(neighbour) * randomness;

            float dist = distance(local, point_position);
            vec2 to_point =
                cell_offset + hash22(neighbour) * randomness - local;

            if (dist < min_distance) {
                min_distance = dist;
                target = neighbour;
                to_closest = to_point;
            }
        }
    }

    min_distance = 8.;

    for (int j = -1; j <= 1; j++) {
        for (int i = -1; i <= 1; i++) {
            vec2 cell_offset = vec2(i, j);
            vec2 neighbour = voronoi_neighbour(cell, cell_offset, scale);
            vec2 to_point =
                cell_offset + hash22(neighbour) * randomness - local;

            vec2 perpendicular_to_edge = to_point - to_closest;

            if(length(perpendicular_to_edge) > 0.0001) {
                float dist = dot((to_closest + to_point) / 2.,
                                 normalize(perpendicular_to_edge));
                min_distance = min(min_distance, dist);
            }
        }
    }

    return vec4(hash32(target), min_distance);
}

vec4 voronoi_3d(vec3 p, float scale) {
    switch (method) {
        case METHOD_F1:
            return voronoi_3d_f1(p, scale);
        case METHOD_F2:
            return voronoi_3d_f2(p, scale);
        case METHOD_DIST:
            return voronoi_3d_dist(p, scale);
        default:
            return vec4(0.);
    }
}

vec4 voronoi_2d(vec2 p, float scale) {
    switch (method) {
        case METHOD_F1:
            return voronoi_2d_f1(p, scale);
        case METHOD_F2:
            return voronoi_2d_f2(p, scale);
        case METHOD_DIST:
            return voronoi_2d_dist(p, scale);
        default:
            return vec4(0.);
    }
}


// Voronoi Fractal with Octaves, mirroring the fBm algorithm from Texturing &
// Modelling: A Procedural Approach, 3rd edition, but using 4D Noise with a
// wrapped around domain such that the result is tileable
//
// Each octave is attenuated by a factor of 'roughness', as in Blender.
vec4 voronoi(vec2 uv) {
    vec4 n = vec4(0.);
    float amplitude = 1.0;
    float maxamp = 0.0;
    float fscale = scale;
    float remainder = fract(octaves);

    vec3 p = vec3(uv, z_coord);
    int i;

    switch (dimensions) {
        case DIMENSIONS_2D:
            for(i = 0; i <= octaves; ++i) {
                vec4 noise = voronoi_2d(p.xy * fscale, fscale);
                n += noise * amplitude;
                maxamp += amplitude;
                amplitude *= roughness;
                fscale *= 2.0;
            }

            n += remainder * voronoi_2d(p.xy * fscale, fscale) * amplitude;
            break;
        case DIMENSIONS_3D:
            for(i = 0; i <= octaves; ++i) {
                vec4 noise = voronoi_3d(p * fscale, fscale);
                n += noise * amplitude;
                maxamp += amplitude;
                amplitude *= roughness;
                fscale *= 2.0;
            }

            n += remainder * voronoi_3d(p * fscale, fscale) * amplitude;
            break;
    }

    n /= maxamp + amplitude * remainder;

    return n;
}

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(t_Distance);
    vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));

    vec4 v = voronoi(uv);

    imageStore(t_Distance, idx, vec4(v.w, v.w, v.w, 1.));
    imageStore(t_Color, idx, vec4(v.xyz, 1.));
}
