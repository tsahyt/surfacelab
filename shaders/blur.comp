#version 460

layout(local_size_x = 64) in;

layout(constant_id = 0) const uint PASS_DIRECTION = 0;

const uint PASS_ROW = 0;
const uint PASS_COLUMN = 1;

layout(set = 0, binding = 0) uniform Params {
    uint quality;
    float sigma;
};

const uint OCCUPANCY_UNOCCUPIED = 2;

layout(set = 0, binding = 1) uniform Occupancy {
    uint occ_in;
    uint occ_mask;
};

layout(set = 0, binding = 2) uniform texture2D t_In;
layout(set = 0, binding = 3) uniform texture2D t_Mask;
layout(set = 0, binding = 4) uniform sampler Sampler;
layout(set = 0, binding = 5, rgba16f) uniform image2D t_Tmp1;
layout(set = 0, binding = 6, rgba16f) uniform image2D t_Tmp2;
layout(set = 0, binding = 7, rgba16f) uniform image2D t_Out;

const float EPSILON = 0.001;
const float SQRT_2 = 1.414213562;
const float PI = 3.14159265359;

// Return the box size for a given sigma.
int box_size(float sigma, uint quality) {
    sigma *= imageSize(t_Out).x / 1024.;
    float n = quality * 2 + 1;
    float w_exact = sqrt(4 * sigma * sigma / n + 1.0);
    int w = int(floor(w_exact));
    if(w % 2 == 0) { w--; };
    return w;
}

// TODO: Consider replacing with incremental Gaussian
// https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-40-incremental-computation-gaussian
float norm_pdf(float x, float sigma) {
    return 0.39894 * exp(- 0.5 * x * x / (sigma * sigma)) / sigma;
}

void row_passes_fixed(float sigma, uint quality) {
    ivec2 resolution = imageSize(t_Out);
    int y = int(gl_GlobalInvocationID.x);
    int r = (box_size(sigma, quality) - 1) / 2;
    vec4 c = vec4(0.);

    // Pass 1, t_In -> t_Tmp1, sampled
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(k, y);
        vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));

        c += texture(sampler2D(t_In, Sampler), uv);
    }

    for(int x = 0; x < imageSize(t_Tmp1).x; ++x) {
        ivec2 idx = ivec2(x + r + 1, y);
        vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
        c += texture(sampler2D(t_In, Sampler), uv);

        idx = ivec2(x - r, y);
        uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
        c -= texture(sampler2D(t_In, Sampler), uv);

        imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
    }

    for(uint q = 0; q < quality; ++q) {
        // Pass 2, t_Tmp1 -> t_Tmp2
        c = vec4(0.);
        for(int k = -r; k < r + 1; k++) {
            ivec2 idx = ivec2(k, y) % imageSize(t_Tmp1);
            c += imageLoad(t_Tmp1, idx);
        }

        for(int x = 0; x < imageSize(t_Tmp2).x; ++x) {
            ivec2 idx = ivec2(x + r + 1, y) % imageSize(t_Tmp1);
            c += imageLoad(t_Tmp1, idx);
            idx = ivec2(x - r, y) % imageSize(t_Tmp1);
            c -= imageLoad(t_Tmp1, idx);

            imageStore(t_Tmp2, ivec2(x, y), c / (r + r + 1));
        }

        // Pass 3, t_Tmp2 -> t_Tmp1
        c = vec4(0.);
        for(int k = -r; k < r + 1; k++) {
            ivec2 idx = ivec2(k, y) % imageSize(t_Tmp2);
            c += imageLoad(t_Tmp2, idx);
        }

        for(int x = 0; x < imageSize(t_Tmp1).x; ++x) {
            ivec2 idx = ivec2(x + r + 1, y) % imageSize(t_Tmp2);
            c += imageLoad(t_Tmp2, idx);
            idx = ivec2(x - r, y) % imageSize(t_Tmp2);
            c -= imageLoad(t_Tmp2, idx);

            imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
        }
    }
}

void column_passes_fixed(float sigma, uint quality) {
    int x = int(gl_GlobalInvocationID.x);
    int r = (box_size(sigma, quality) - 1) / 2;
    vec4 c = vec4(0.);

    for(uint q = 0; q < quality; ++q) {
        // Pass 1, t_Tmp1 -> t_Tmp2
        for(int k = -r; k < r + 1; k++) {
            ivec2 idx = ivec2(x, k) % imageSize(t_Tmp1);
            c += imageLoad(t_Tmp1, idx);
        }

        for(int y = 0; y < imageSize(t_Tmp2).y; ++y) {
            ivec2 idx = ivec2(x, y + r + 1) % imageSize(t_Tmp1);
            c += imageLoad(t_Tmp1, idx);
            idx = ivec2(x, y - r) % imageSize(t_Tmp1);
            c -= imageLoad(t_Tmp1, idx);

            imageStore(t_Tmp2, ivec2(x, y), c / (r + r + 1));
        }

        // Pass 2, t_Tmp2 -> t_Tmp1
        c = vec4(0.);
        for(int k = -r; k < r + 1; k++) {
            ivec2 idx = ivec2(x, k) % imageSize(t_Tmp2);
            c += imageLoad(t_Tmp2, idx);
        }

        for(int y = 0; y < imageSize(t_Tmp1).y; ++y) {
            ivec2 idx = ivec2(x, y + r + 1) % imageSize(t_Tmp2);
            c += imageLoad(t_Tmp2, idx);
            idx = ivec2(x, y - r) % imageSize(t_Tmp2);
            c -= imageLoad(t_Tmp2, idx);

            imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
        }
    }

    // Pass 3, t_Tmp1 -> t_Out
    c = vec4(0.);
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(x, k) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
    }

    for(int y = 0; y < imageSize(t_Out).y; ++y) {
        ivec2 idx = ivec2(x, y + r + 1) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
        idx = ivec2(x, y - r) % imageSize(t_Tmp1);
        c -= imageLoad(t_Tmp1, idx);

        imageStore(t_Out, ivec2(x, y), c / (r + r + 1));
    }
}

float radical_inverse_vdc(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), radical_inverse_vdc(i));
}

void row_passes_variable() {
    ivec2 resolution = imageSize(t_Out);
    int y = int(gl_GlobalInvocationID.x);

    // Variable size blur sampled via Hammersley sequence
    for(int x = 0; x < resolution.x; ++x) {
        vec4 c = vec4(0.);
        float z = 0.;
        vec2 uv = vec2(x, y) / vec2(resolution);
        float m = max(texture(sampler2D(t_Mask, Sampler), uv).r, EPSILON);

        float k_size = m * sigma;
        int samples = quality == 0 ? 40 : 80;

        for(int i = 0; i < samples; ++i) {
            vec2 p = m * sigma * (hammersley(i, samples) * 2. - 1.);

            float weight_i = norm_pdf(p.x, m * sigma);
            float weight_j = norm_pdf(p.y, m * sigma);

            c += weight_i * weight_j *
                texture(sampler2D(t_In, Sampler), uv + (p / vec2(resolution)));
            z += weight_i * weight_j;
        }

        imageStore(t_Tmp2, ivec2(x, y), c / z);
    }

    // Fast blur with small sigma to fix stair stepping due to undersampling
    vec4 c = vec4(0.);
    int r = (box_size(clamp(quality == 1 ? sigma / 8. : sigma / 4., 2., 7.), 1) - 1) / 2;

    // Pass 1, t_Tmp2 -> t_Tmp1
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(k, y) % imageSize(t_Tmp2);
        c += imageLoad(t_Tmp2, idx);
    }

    for(int x = 0; x < imageSize(t_Tmp1).x; ++x) {
        ivec2 idx = ivec2(x + r + 1, y) % imageSize(t_Tmp2);
        c += imageLoad(t_Tmp2, idx);
        idx = ivec2(x - r, y) % imageSize(t_Tmp2);
        c -= imageLoad(t_Tmp2, idx);

        imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
    }

    // Pass 2, t_Tmp2 -> t_Tmp1
    c = vec4(0.);
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(k, y) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
    }

    for(int x = 0; x < imageSize(t_Tmp2).x; ++x) {
        ivec2 idx = ivec2(x + r + 1, y) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
        idx = ivec2(x - r, y) % imageSize(t_Tmp1);
        c -= imageLoad(t_Tmp1, idx);

        imageStore(t_Tmp2, ivec2(x, y), c / (r + r + 1));
    }

    // Pass 3, t_Tmp2 -> t_Tmp1
    c = vec4(0.);
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(k, y) % imageSize(t_Tmp2);
        c += imageLoad(t_Tmp2, idx);
    }

    for(int x = 0; x < imageSize(t_Tmp1).x; ++x) {
        ivec2 idx = ivec2(x + r + 1, y) % imageSize(t_Tmp2);
        c += imageLoad(t_Tmp2, idx);
        idx = ivec2(x - r, y) % imageSize(t_Tmp2);
        c -= imageLoad(t_Tmp2, idx);

        imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
    }
}

void column_passes_variable() {
    int x = int(gl_GlobalInvocationID.x);
    int r = (box_size(clamp(quality == 1 ? sigma / 8. : sigma / 4., 2., 7.), 1) - 1) / 2;
    vec4 c = vec4(0.);

    // Pass 1, t_Tmp1 -> t_Tmp2
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(x, k) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
    }

    for(int y = 0; y < imageSize(t_Tmp2).y; ++y) {
        ivec2 idx = ivec2(x, y + r + 1) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
        idx = ivec2(x, y - r) % imageSize(t_Tmp1);
        c -= imageLoad(t_Tmp1, idx);

        imageStore(t_Tmp2, ivec2(x, y), c / (r + r + 1));
    }

    // Pass 2, t_Tmp2 -> t_Tmp1
    c = vec4(0.);
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(x, k) % imageSize(t_Tmp2);
        c += imageLoad(t_Tmp2, idx);
    }

    for(int y = 0; y < imageSize(t_Tmp1).y; ++y) {
        ivec2 idx = ivec2(x, y + r + 1) % imageSize(t_Tmp2);
        c += imageLoad(t_Tmp2, idx);
        idx = ivec2(x, y - r) % imageSize(t_Tmp2);
        c -= imageLoad(t_Tmp2, idx);

        imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
    }

    // Pass 3, t_Tmp1 -> t_Tmp2
    c = vec4(0.);
    for(int k = -r; k < r + 1; k++) {
        ivec2 idx = ivec2(x, k) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
    }

    for(int y = 0; y < imageSize(t_Out).y; ++y) {
        ivec2 idx = ivec2(x, y + r + 1) % imageSize(t_Tmp1);
        c += imageLoad(t_Tmp1, idx);
        idx = ivec2(x, y - r) % imageSize(t_Tmp1);
        c -= imageLoad(t_Tmp1, idx);

        imageStore(t_Out, ivec2(x, y), c / (r + r + 1));
    }
}

// Perform the first passes on the intermediate image
void pass_1() {
    switch(occ_mask) {
        case OCCUPANCY_UNOCCUPIED:
            row_passes_fixed(sigma, quality);
            break;
        default:
            row_passes_variable();
            break;
    }
}

// Perform the second passes on the intermediate image
void pass_2() {
    switch(occ_mask) {
        case OCCUPANCY_UNOCCUPIED:
            column_passes_fixed(sigma, quality);
            break;
        default:
            column_passes_variable();
            break;
    }
}

void main() {
    switch(PASS_DIRECTION) {
        case 0:
            pass_1();
            return;
        case 1:
            pass_2();
            return;
    }
}
