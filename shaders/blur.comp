#version 460

layout(local_size_x = 64) in;

layout(constant_id = 0) const uint PASS_DIRECTION = 0;

const uint PASS_ROW = 0;
const uint PASS_COLUMN = 1;

layout(set = 0, binding = 0) uniform Params {
    float sigma;
};

layout(set = 0, binding = 1) uniform texture2D t_In;
layout(set = 0, binding = 2) uniform sampler Sampler;
layout(set = 0, binding = 3, rgba16f) uniform image2D t_Tmp1;
layout(set = 0, binding = 4, rgba16f) uniform image2D t_Tmp2;
layout(set = 0, binding = 5, rgba16f) uniform image2D t_Out;

// Return the box size for a given sigma, a number of boxes, and the current box
// index (0 .. n)
int box_size(float sigma, int n, int i) {
    float w_exact = sqrt(12.0 * sigma * sigma / float(n) + 1);
    int w = int(floor(w_exact));
    if(w % 2 == 0) { w--; };

    float m_exact =
        (12.0 * sigma * sigma - float(n) * w * w - 4.0 * float(n) * float(w) - 3.0 * float(n)) /
        (- 4.0 * float(w) - 4.0);
    int m = int(round(m_exact));

    return i < m ? w : w + 2;
}

// Perform the row passes on the intermediate image, i.e. blurring with constant y
void row_passes() {
    int y = int(gl_GlobalInvocationID.x);

    int r = (box_size(sigma, 3, 0) - 1) / 2;

    // Pass 1, t_In -> t_Tmp1, sampled
    for(int x = 0; x < imageSize(t_Tmp1).x; ++x) {
        vec4 c = vec4(0.);

        for(int k = x - r; k < x + r + 1; k++) {
            ivec2 idx = ivec2(k, y);
            ivec2 resolution = imageSize(t_Out);
            vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));

            c += texture(sampler2D(t_In, Sampler), uv);
        }

        imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
    }

    r = (box_size(sigma, 3, 1) - 1) / 2;

    // Pass 2, t_Tmp1 -> t_Tmp2
    for(int x = 0; x < imageSize(t_Tmp2).x; ++x) {
        vec4 c = vec4(0.);

        for(int k = x - r; k < x + r + 1; k++) {
            ivec2 idx = ivec2(k, y) % imageSize(t_Tmp1);
            c += imageLoad(t_Tmp1, idx);
        }

        imageStore(t_Tmp2, ivec2(x, y), c / (r + r + 1));
    }

    r = (box_size(sigma, 3, 2) - 1) / 2;

    // Pass 3, t_Tmp2 -> t_Tmp1
    for(int x = 0; x < imageSize(t_Tmp1).x; ++x) {
        vec4 c = vec4(0.);

        for(int k = x - r; k < x + r + 1; k++) {
            ivec2 idx = ivec2(k, y) % imageSize(t_Tmp2);
            c += imageLoad(t_Tmp2, idx);
        }

        imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
    }
}

// Perform the column passes on the intermediate image, i.e. blurring with constant x.
void column_passes() {
    int x = int(gl_GlobalInvocationID.x);
    int r = (box_size(sigma, 3, 0) - 1) / 2;

    // Pass 1, t_Tmp1 -> t_Tmp2
    for(int y = 0; y < imageSize(t_Tmp2).y; ++y) {
        vec4 c = vec4(0.);

        for(int k = y - r; k < y + r + 1; k++) {
            ivec2 idx = ivec2(x, k) % imageSize(t_Tmp1);
            c += imageLoad(t_Tmp1, idx);
        }

        imageStore(t_Tmp2, ivec2(x, y), c / (r + r + 1));
    }

    // Pass 2, t_Tmp2 -> t_Tmp1
    for(int y = 0; y < imageSize(t_Tmp1).y; ++y) {
        vec4 c = vec4(0.);

        for(int k = y - r; k < y + r + 1; k++) {
            ivec2 idx = ivec2(x, k) % imageSize(t_Tmp2);
            c += imageLoad(t_Tmp2, idx);
        }

        imageStore(t_Tmp1, ivec2(x, y), c / (r + r + 1));
    }

    // Pass 3, t_Tmp1 -> t_Out
    for(int y = 0; y < imageSize(t_Out).y; ++y) {
        vec4 c = vec4(0.);

        for(int k = y - r; k < y + r + 1; k++) {
            ivec2 idx = ivec2(x, k) % imageSize(t_Tmp1);
            c += imageLoad(t_Tmp1, idx);
        }

        imageStore(t_Out, ivec2(x, y), c / (r + r + 1));
    }
}

void main() {
    switch(PASS_DIRECTION) {
        case 0:
            row_passes();
            return;
        case 1:
            column_passes();
            return;
    }
}
