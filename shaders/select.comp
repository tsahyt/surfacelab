#version 460

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Params {
    vec3 color;
    uint grayscale_mode;
    uint color_mode;
    uint smooth_edge;
    uint invert;
    float threshold;
    float bandwidth;
};

const uint GRAYSCALE_MODE_THRESHOLD = 0;
const uint GRAYSCALE_MODE_BAND = 1;

const uint COLOR_MODE_EUCLIDEAN = 0;
const uint COLOR_MODE_CHROMINANCE = 1;
const uint COLOR_MODE_LUMINANCE = 2;

layout(set = 0, binding = 1) uniform Occupancy {
    uint input_occupancy;
};

const uint OCCUPANCY_GRAYSCALE = 0;
const uint OCCUPANCY_COLOR = 1;

layout(set = 0, binding = 2) uniform texture2D t_Color1;
layout(set = 0, binding = 3) uniform sampler Sampler;
layout(set = 0, binding = 4, r32f) uniform image2D t_Out;

const float SQRT3 = 1.73205080757;

vec3 rgb_to_ycbcr(vec3 rgb) {
    float y = 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b;
    float cb = (rgb.b - y) * 0.565;
    float cr = (rgb.r - y) * 0.713;
    return vec3(y, cb, cr);
}

float run_grayscale(vec2 uv) {
    float value = texture(sampler2D(t_Color1, Sampler), uv).r;

    switch(grayscale_mode) {
        case GRAYSCALE_MODE_THRESHOLD:
            return step(threshold, value);
        case GRAYSCALE_MODE_BAND:
            return step(abs(value - threshold), bandwidth / 2.);
        default:
            return 0.;
    }
}

float chroma_key(vec3 c, vec3 k) {
    c = rgb_to_ycbcr(c) * 2. - 1.;
    k = rgb_to_ycbcr(k) * 2. - 1.;

    float theta = atan(k.z, k.y);

    // Rotate Cb and Cr into X/Z Space
    float x_angle = c.y * cos(theta) + c.z * sin(theta);
    float z_angle = c.z * cos(theta) - c.y * sin(theta);

    float kfg = x_angle - (abs(z_angle) / tan(threshold / 2.));

    return step(kfg, 0.);
}

float luma_key(vec3 c) {
    return step(threshold, rgb_to_ycbcr(c).x);
}

float run_rgb(vec2 uv) {
    vec3 col = texture(sampler2D(t_Color1, Sampler), uv).rgb;

    switch(color_mode) {
        case COLOR_MODE_EUCLIDEAN:
            return step(threshold * SQRT3, distance(col, color));
        case COLOR_MODE_CHROMINANCE:
            return chroma_key(col, color);
        case COLOR_MODE_LUMINANCE:
            return luma_key(col);
    }

    return 0.;
}

float run(vec2 uv) {
    switch(input_occupancy) {
        case OCCUPANCY_GRAYSCALE:
            return run_grayscale(uv);
        case OCCUPANCY_COLOR:
            return run_rgb(uv);
    }
}

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(t_Out);
    vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));

    float new = 0.;

    if(smooth_edge != 0) {
        vec2 sub_sample = 0.25 / vec2(resolution);

        for(int x = - 2; x <= 2; ++x) {
            for(int y = - 2; y <= 2; ++y) {
                vec2 uv_ = uv + vec2(x, y) * sub_sample;
                new += run(uv_);
            }
        }
        new /= 25.;
    } else {
        new = run(uv);
    }

    if(invert != 0) {
        new = 1. - new;
    }

    imageStore(t_Out, idx, vec4(vec3(new), 1.));
}
