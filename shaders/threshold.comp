#version 460

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Params {
    uint smooth_edge;
    uint invert;
    float threshold;
};

layout(set = 0, binding = 1) uniform texture2D t_Color1;
layout(set = 0, binding = 2) uniform sampler Sampler;
layout(set = 0, binding = 3, rgba16f) uniform image2D t_Out;

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(t_Out);
    vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));

    float new = 0.;

    if(smooth_edge != 0) {
        vec2 sub_sample = 0.25 / vec2(resolution);

        for(int x = - 2; x <= 2; ++x) {
            for(int y = - 2; y <= 2; ++y) {
                vec2 uv_ = uv + vec2(x, y) * sub_sample;
                float value = texture(sampler2D(t_Color1, Sampler), uv_).r;
                new += step(threshold, value);
            }
        }
        new /= 25.;
    } else {
        float value = texture(sampler2D(t_Color1, Sampler), uv).r;
        new = step(threshold, value);
    }

    if(invert != 0) {
        new = 1. - new;
    }

    imageStore(t_Out, idx, vec4(vec3(new), 1.));
}
