#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform texture2D equirect;
layout(set = 0, binding = 1) uniform sampler Sampler;
layout(set = 0, binding = 2, rgba32f) uniform imageCube cube;

const float PI = 3.14159265359;
const vec2 invAtan = vec2(0.1591, 0.3183);

// Hammersley Sequence Method
const uint samples = 8192;

vec2 sample_spherical_map(vec3 v)
{
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

vec3 convert_cube_uv_to_xyz(int index, vec2 uv)
{
  // convert range 0 to 1 to -1 to 1
  vec2 uvc = 2.0 * uv - 1.0;

  switch (index) {
      case 0:
          return vec3(1.0, uvc.y, -uvc.x);
      case 1:
          return vec3(- 1.0, uvc.y, uvc.x);
      case 2:
          return vec3(uvc.x, - 1.0, uvc.y);
      case 3:
          return vec3(uvc.x, 1.0, -uvc.y);
      case 4:
          return vec3(uvc.x, uvc.y, 1.0);
      case 5:
          return vec3(- uvc.x, uvc.y, - 1.0);
  }
}

float radical_inverse_vdc(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), radical_inverse_vdc(i));
}

void main() {
    ivec2 resolution = imageSize(cube);
    ivec3 idx = ivec3(gl_GlobalInvocationID);

    vec2 face_uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
    vec3 direction = normalize(convert_cube_uv_to_xyz(int(gl_GlobalInvocationID.z), face_uv));

    imageStore(cube, idx, vec4(0., 0., 0., 1.));
}
