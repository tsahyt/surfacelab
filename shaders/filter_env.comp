#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform texture2D equirect;
layout(set = 0, binding = 1) uniform sampler Sampler;
layout(set = 0, binding = 2, rgba32f) uniform imageCube cube;

layout(push_constant) uniform constants_t {
    float roughness;
} constants;

const float PI = 3.14159265359;
const vec2 invAtan = vec2(0.1591, 0.3183);
const uint samples = 2048;

vec2 sample_spherical_map(vec3 v)
{
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

vec3 convert_cube_uv_to_xyz(int index, vec2 uv)
{
  // convert range 0 to 1 to -1 to 1
  vec2 uvc = 2.0 * uv - 1.0;

  switch (index) {
      case 0:
          return vec3(1.0, uvc.y, -uvc.x);
      case 1:
          return vec3(- 1.0, uvc.y, uvc.x);
      case 2:
          return vec3(uvc.x, - 1.0, uvc.y);
      case 3:
          return vec3(uvc.x, 1.0, -uvc.y);
      case 4:
          return vec3(uvc.x, uvc.y, 1.0);
      case 5:
          return vec3(- uvc.x, uvc.y, - 1.0);
  }
}

float radical_inverse_vdc(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), radical_inverse_vdc(i));
}

// Calculate importance sample from low discrepancy 2D data and the normal
// orienting the hemisphere, adjusting for roughness (size of specular lobe).
vec3 importance_sample_ggx(vec2 xi, vec3 n, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * xi.x;
    float cos_theta = sqrt((1.0 - xi.y) / (1.0 + (a*a - 1.0) * xi.y));
    float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

    // spherical coordinates to cartesian coordinates
    vec3 h;
    h.x = cos(phi) * sin_theta;
    h.y = sin(phi) * sin_theta;
    h.z = cos_theta;

    // tangent-space vector to world-space sample vector
    vec3 up = abs(n.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tx = normalize(cross(up, n));
    vec3 ty = cross(n, tx);

    vec3 vec = tx * h.x + ty * h.y + n * h.z;

    return normalize(vec);
}

float pdf_ggx(float noh, float hov, float roughness) {
    float a = roughness * roughness * roughness;
    float b = (a - 1.0) * noh * noh + 1;
    float D = a / (PI * b * b);
    return (D * noh / (4.0 * hov)) + 0.0001;
}


vec3 filter_environment(vec3 r) {
    vec3 n = r;
    vec3 v = r;

    float total_weight = 0.0;
    vec3 prefiltered_color = vec3(0.0);

    vec2 tex_size = vec2(textureSize(sampler2D(equirect, Sampler), 0));
    float size = max(tex_size.x, tex_size.y);

    for(uint i = 0; i < samples; ++i) {
        vec2 xi = hammersley(i, samples);
        vec3 h = importance_sample_ggx(xi, n, constants.roughness);
        vec3 l = 2.0 * dot(v, h) * h - v;

        float nol = clamp(dot(n, l), 0., 1.);
        float noh = clamp(dot(n, h), 0., 1.);
        float hov = clamp(dot(h, v), 0., 1.);

        if(nol > 0.)
        {
            float pdf = pdf_ggx(noh, hov, constants.roughness);

            float solid_angle_texel = 4. * PI / (size * size);
            float solid_angle_sample = 1.0 / (samples * pdf + 0.001);
            float lod = log2(solid_angle_sample / solid_angle_texel);

            vec3 sample_color = textureLod(sampler2D(equirect, Sampler), sample_spherical_map(l), lod).rgb;
            prefiltered_color += sample_color * nol;
            total_weight += nol;
        }
    }

    return prefiltered_color / total_weight;
}

void main() {
    ivec2 resolution = imageSize(cube);
    ivec3 idx = ivec3(gl_GlobalInvocationID);

    vec2 face_uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
    vec3 direction = normalize(convert_cube_uv_to_xyz(int(gl_GlobalInvocationID.z), face_uv));

    vec3 col = vec3(0.);

    if (constants.roughness == 0.0) {
        vec2 equirect_uv = sample_spherical_map(direction);
        col = texture(sampler2D(equirect, Sampler), equirect_uv).rgb;
    } else {
        col = filter_environment(direction);
    }

    imageStore(cube, idx, vec4(col, 1.));
}
