#version 460

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Params {
    uint mode;
    float hue;
    float saturation;
    float value;
    float lightness;
    float chroma;
    float fac;
};

const uint MODE_HSV = 0;
const uint MODE_HSL = 1;
const uint MODE_HCL = 2;

layout(set = 0, binding = 1) uniform texture2D t_Color1;
layout(set = 0, binding = 2) uniform sampler Sampler;
layout(set = 0, binding = 3, rgba16f) uniform image2D t_Out;

const float HCL_GAMMA = 3.0;
const float HCL_Y0 = 100;
const float HCL_MAX_L = 0.530454533953517;
const float PI = 3.1415926536;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, - 1.0 / 3.0, 2.0 / 3.0, - 1.0);
    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 hsl2rgb(vec3 c) {
    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);

    return c.z + c.y * (rgb - 0.5) * (1.0 - abs(2.0 * c.z - 1.0));
}

vec3 rgb2hsl(vec3 color) {
    vec3 hsl = vec3(0.);

    float fmin = min(min(color.r, color.g), color.b);
    float fmax = max(max(color.r, color.g), color.b);
    float delta = fmax - fmin;

    hsl.z = (fmax + fmin) / 2.0;

    if (delta == 0.0)
    {
        hsl.x = 0.0;
        hsl.y = 0.0;
    } else
    {
        if (hsl.z < 0.5)
            hsl.y = delta / (fmax + fmin);
        else
            hsl.y = delta / (2.0 - fmax - fmin);

        float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;
        float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;
        float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;

        if (color.r == fmax)
            hsl.x = deltaB - deltaG;
        else if (color.g == fmax)
            hsl.x = (1.0 / 3.0) + deltaR - deltaB;
        else if (color.b == fmax)
            hsl.x = (2.0 / 3.0) + deltaG - deltaR;

        if (hsl.x < 0.0)
            hsl.x += 1.0;
        else if (hsl.x > 1.0)
            hsl.x -= 1.0;
    }

    return hsl;
}

vec3 rgb2hcl(vec3 c)
{
    vec3 hcl;
    float h = 0;
    float u = min(c.r, min(c.g, c.b));
    float v = max(c.r, max(c.g, c.b));
    float q = HCL_GAMMA / HCL_Y0;

    hcl.y = v - u;

    if (hcl.y != 0)
    {
        h = atan(c.g - c.b, c.r - c.g) / PI;
        q *= u / v;
    }

    q = exp(q);

    hcl.x = fract(h / 2.0 - min(fract(h), fract(-h)) / 6.0);
    hcl.y *= q;
    hcl.z = mix(-u, v, q) / (HCL_MAX_L * 2.0);

    return hcl;
}

vec3 hcl2rgb(vec3 hcl)
{
    vec3 rgb = vec3(0.0);
    if (hcl.z != 0)
    {
        float h = hcl.x;
        float c = hcl.y;
        float l = hcl.z * HCL_MAX_L;
        float q = exp((1.0 - c / (2.0 * l)) * (HCL_GAMMA / HCL_Y0));
        float u = (2.0 * l - c) / (2.0 * q - 1.0);
        float v = c / q;
        float a = (h + min(fract(2.0 * h) / 4.0, fract(- 2.0 * h) / 8.0)) * PI * 2.0;
        float t;
        h *= 6.0;

        if (h <= 0.999)
        {
            t = tan(a);
            rgb.r = 1.0;
            rgb.g = t / (1.0 + t);
        }
        else if (h <= 1.001)
        {
            rgb.r = 1.0;
            rgb.g = 1.0;
        }
        else if (h <= 2.0)
        {
            t = tan(a);
            rgb.r = (1.0 + t) / t;
            rgb.g = 1.0;
        }
        else if (h <= 3.0)
        {
            t = tan(a);
            rgb.g = 1.0;
            rgb.b = 1.0 + t;
        }
        else if (h <= 3.999)
        {
            t = tan(a);
            rgb.g = 1.0 / (1 + t);
            rgb.b = 1.0;
        }
        else if (h <= 4.001)
        {
            rgb.g = 0.0;
            rgb.b = 1.0;
        }
        else if (h <= 5.0)
        {
            t = tan(a);
            rgb.r = - 1.0 / t;
            rgb.b = 1.0;
        }
        else
        {
            t = tan(a);
            rgb.r = 1.0;
            rgb.b = -t;
        }
        rgb = rgb * v + u;
    }

    return rgb;
}

vec3 hsv_adjust(vec3 color) {
    vec3 hsv = rgb2hsv(color);

    hsv.x = mod(hsv.x + hue + 0.5, 1.0);
    hsv.y = clamp(hsv.y * saturation, 0., 1.);
    hsv.z *= value;

    return hsv2rgb(hsv);
}

vec3 hsl_adjust(vec3 color) {
    vec3 hsl = rgb2hsl(color);

    hsl.x = mod(hsl.x + hue + 0.5, 1.0);
    hsl.y = clamp(hsl.y * saturation, 0., 1.);
    hsl.z *= lightness;

    return hsl2rgb(hsl);
}

vec3 hcl_adjust(vec3 color) {
    vec3 hcl = rgb2hcl(color);

    hcl.x = mod(hcl.x + hue + 0.5, 1.0);
    hcl.y = clamp(hcl.y * chroma, 0., 1.);
    hcl.z *= lightness;

    return hcl2rgb(hcl);
}

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(t_Out);
    vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));

    vec3 color = texture(sampler2D(t_Color1, Sampler), uv).rgb;
    vec3 new = vec3(0.);

    switch(mode) {
        case MODE_HSV:
            new = hsv_adjust(color);
            break;
        case MODE_HSL:
            new = hsl_adjust(color);
            break;
        case MODE_HCL:
            new = hcl_adjust(color);
            break;
    }

    new = max(new, 0.);
    new = mix(color, new, fac);

    imageStore(t_Out, idx, vec4(new, 1.));
}
