#version 460

layout(local_size_x = 64) in;

layout(constant_id = 0) const uint PASS_DIRECTION = 0;

const uint PASS_COLUMN = 0;
const uint PASS_ROW = 1;

layout(set = 0, binding = 0) uniform Params {
    float threshold;
};

layout(set = 0, binding = 1) uniform texture2D t_In;
layout(set = 0, binding = 2) uniform sampler Sampler;
layout(set = 0, binding = 3, r32f) uniform image2D t_Tmp;
layout(set = 0, binding = 4) buffer tBuf {
    int[] t;
};
layout(set = 0, binding = 5) buffer sBuf {
    int[] s;
};
layout(set = 0, binding = 6, r32f) uniform image2D t_Out;

const float EPSILON = 0.0001;

bool in_set(ivec2 idx) {
    vec2 uv = vec2(float(idx.x) / float(imageSize(t_Tmp).x), float(idx.y) / float(imageSize(t_Tmp).y));
    return texture(sampler2D(t_In, Sampler), uv).r > threshold;
}

// Perform column pass for the DT. This is Scan 1 and 2 in the original paper.
void column_pass() {
    int x = int(gl_GlobalInvocationID.x);
    int n = imageSize(t_Tmp).x;

    // Scan 1
    float last = 0.;
    if(!in_set(ivec2(x, 0))) {
        last = float(n) * 2.;
    }
    imageStore(t_Tmp, ivec2(x, 0), vec4(last));

    for(int y = 1; y < n; ++y) {
        if(in_set(ivec2(x, y))) {
            last = 0.;
        } else {
            last = 1.0 + last;
        }
        imageStore(t_Tmp, ivec2(x, y), vec4(last));
    }

    // Scan 2
    for(int y = n - 2; y >= 0; --y) {
        float current = imageLoad(t_Tmp, ivec2(x, y)).r;
        if(last < current) {
            current = 1.0 + last;
            imageStore(t_Tmp, ivec2(x, y), vec4(current));
        }
        last = current;
    }
}

float edt_f(int x, int i) {
    int y = int(gl_GlobalInvocationID.x);
    float gi = imageLoad(t_Tmp, ivec2(i, y)).r;
    return sqrt(float((x - i) * (x - i)) + gi * gi);
}

int edt_sep(int i, int u) {
    int y = int(gl_GlobalInvocationID.x);
    float gi = imageLoad(t_Tmp, ivec2(i, y)).r;
    float gu = imageLoad(t_Tmp, ivec2(u, y)).r;
    return (u * u - i * i + (int(gu * gu - gi * gi))) / (2 * (u - i));
}

void row_pass() {
    int y = int(gl_GlobalInvocationID.x);
    int m = imageSize(t_Out).y;
    int offset = y * m;

    int q = 0;
    s[offset + 0] = 0;
    t[offset + 0] = 0;

    // Scan 3
    for(int u = 0; u < m; ++u) {
        while(q >= 0 && edt_f(t[offset + q], s[offset + q]) > edt_f(t[offset + q], u) + EPSILON) {
            q--;
        }
        if(q < 0) {
            q = 0;
            s[offset + 0] = u;
        } else {
            int w = 1 + edt_sep(s[offset + q], u);
            if(w < m) {
                q++;
                s[offset + q] = u;
                t[offset + q] = w;
            }
        }
    }

    // Scan 4
    for(int u = m - 1; u >= 0; --u) {
        float dt = edt_f(u, s[offset + q]);
        imageStore(t_Out, ivec2(u, y), vec4(dt) / float(m));
        if(u == t[offset + q]) {
            q--;
        }
    }
}

void main() {
    switch(PASS_DIRECTION) {
        case 0:
            column_pass();
            return;
        case 1:
            row_pass();
            return;
    }
}
