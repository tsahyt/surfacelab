#version 460

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Params {
    uint mode;
    float sharpness;
    uint clamp_output;
};

layout(set = 0, binding = 1) uniform texture2D t_mask;
layout(set = 0, binding = 2) uniform texture2D t_Color1;
layout(set = 0, binding = 3) uniform texture2D t_Color2;
layout(set = 0, binding = 4) uniform sampler Sampler;
layout(set = 0, binding = 5, rgba16f) uniform image2D t_Out;

#define MODE_MIX 0
#define MODE_MULTIPLY 1
#define MODE_ADD 2
#define MODE_SUBTRACT 3
#define MODE_SCREEN 4
#define MODE_OVERLAY 5
#define MODE_DARKEN 6
#define MODE_LIGHTEN 7
#define MODE_SMOOTH_DARKEN 8
#define MODE_SMOOTH_LIGHTEN 9

float overlay_f(float a, float b) {
    if (a < 0.5) {
        return 2. * a * b;
    } else {
        return 1. - 2. * (1. - a) * (1. - b);
    }
}

vec4 overlay(vec4 a, vec4 b) {
    return vec4(overlay_f(a.r, b.r), overlay_f(a.g, b.g), overlay_f(a.b, b.b), overlay_f(a.a, b.a));
}

vec4 smin(vec4 a, vec4 b, float k)
{
    return -(log(exp(k*-a)+exp(k*-b))/k);
}

vec4 smax(vec4 a, vec4 b, float k)
{
    return log(exp(k*a)+exp(k*b))/k;
}

vec4 blend(vec4 col1, vec4 col2, float mix_factor) {
    if (mode == MODE_MIX)
        return mix(col1, col2, mix_factor);
    else if (mode == MODE_MULTIPLY)
        return mix(col1, col1 * col2, mix_factor);
    else if (mode == MODE_ADD)
        return mix(col1, col1 + col2, mix_factor);
    else if (mode == MODE_SUBTRACT)
        return mix(col1, col1 - col2, mix_factor);
    else if (mode == MODE_SCREEN)
        return mix(col1, 1. - (1. - col1) * (1. - col2), mix_factor);
    else if (mode == MODE_OVERLAY)
        return mix(col1, overlay(col1, col2), mix_factor);
    else if (mode == MODE_DARKEN)
        return mix(col1, min(col1, col2), mix_factor);
    else if (mode == MODE_LIGHTEN)
        return mix(col1, max(col1, col2), mix_factor);
    else if (mode == MODE_SMOOTH_DARKEN)
        return mix(col1, smin(col1, col2, sharpness), mix_factor);
    else if (mode == MODE_SMOOTH_LIGHTEN)
        return mix(col1, smax(col1, col2, sharpness), mix_factor);
}

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(t_Out);
    vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
    float mask = texture(sampler2D(t_mask, Sampler), uv).r;
    vec4 col1 = texture(sampler2D(t_Color1, Sampler), uv);
    vec4 col2 = texture(sampler2D(t_Color2, Sampler), uv);

    vec4 res = blend(col1, col2, clamp(mask, 0., 1.));

    if (clamp_output != 0) {
        res = clamp(res, 0., 1.);
    }

    res.a = 1.0;

    imageStore(t_Out, idx, res);
}
