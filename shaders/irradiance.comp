#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform texture2D equirect;
layout(set = 0, binding = 1) uniform sampler Sampler;
layout(set = 0, binding = 2, rgba32f) uniform imageCube cube;

const float PI = 3.14159265359;
const vec2 invAtan = vec2(0.1591, 0.3183);

vec2 sample_spherical_map(vec3 v)
{
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

vec3 convert_cube_uv_to_xyz(int index, vec2 uv)
{
  // convert range 0 to 1 to -1 to 1
  vec2 uvc = 2.0 * uv - 1.0;

  switch (index) {
      case 0:
          return vec3(1.0, uvc.y, -uvc.x);
      case 1:
          return vec3(- 1.0, uvc.y, uvc.x);
      case 2:
          return vec3(uvc.x, - 1.0, uvc.y);
      case 3:
          return vec3(uvc.x, 1.0, -uvc.y);
      case 4:
          return vec3(uvc.x, uvc.y, 1.0);
      case 5:
          return vec3(- uvc.x, uvc.y, - 1.0);
  }
}

void main() {
    ivec2 resolution = imageSize(cube);
    ivec3 idx = ivec3(gl_GlobalInvocationID);

    vec2 face_uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
    vec3 direction = normalize(convert_cube_uv_to_xyz(int(gl_GlobalInvocationID.z), face_uv));

    vec3 irradiance = vec3(0.);

    // Convolution
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = cross(up, direction);
    up = cross(direction, right);

    float sample_delta = 0.025;
    float nr_samples = 0.0;

    for(float phi = 0.0; phi < 2.0 * PI; phi += sample_delta) {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sample_delta) {
            // spherical to cartesian (in tangent space)
            vec3 tangent_sample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sample_vec = tangent_sample.x * right + tangent_sample.y * up + tangent_sample.z * direction;
            vec2 equirect_uv = sample_spherical_map(sample_vec);

            irradiance += texture(sampler2D(equirect, Sampler), equirect_uv).rgb * cos(theta) * sin(theta);
            nr_samples++;
        }
    }

    irradiance = PI * irradiance * (1.0 / float(nr_samples));

    imageStore(cube, idx, vec4(irradiance, 1.));
}
