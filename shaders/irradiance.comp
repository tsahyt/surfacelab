#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform texture2D equirect;
layout(set = 0, binding = 1) uniform sampler Sampler;
layout(set = 0, binding = 2, rgba32f) uniform imageCube cube;

const float PI = 3.14159265359;
const float INV_PI = 1.0 / PI;
const vec2 invAtan = vec2(0.1591, 0.3183);

const float sample_delta = 0.025;
const float sample_count = (PI / sample_delta) * (0.5 * PI / sample_delta);

vec2 sample_spherical_map(vec3 v)
{
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

vec3 convert_cube_uv_to_xyz(int index, vec2 uv)
{
  // convert range 0 to 1 to -1 to 1
  vec2 uvc = 2.0 * uv - 1.0;

  switch (index) {
      case 0:
          return vec3(1.0, uvc.y, -uvc.x);
      case 1:
          return vec3(- 1.0, uvc.y, uvc.x);
      case 2:
          return vec3(uvc.x, - 1.0, uvc.y);
      case 3:
          return vec3(uvc.x, 1.0, -uvc.y);
      case 4:
          return vec3(uvc.x, uvc.y, 1.0);
      case 5:
          return vec3(- uvc.x, uvc.y, - 1.0);
  }
}

// Calculate importance sample from low discrepancy 2D data and the normal
// orienting the hemisphere
vec3 sample_hemisphere(float phi, float theta, vec3 n)
{
    // spherical coordinates to cartesian coordinates
    vec3 h;
    h.x = sin(theta) * cos(phi);
    h.y = sin(theta) * sin(phi);
    h.z = cos(theta);

    // tangent-space vector to world-space sample vector
    vec3 up = abs(n.z) < 0.999 ? vec3(0., 0. ,1.) : vec3(1., 0., 0.);
    vec3 tx = normalize(cross(up, n));
    vec3 ty = cross(n, tx);

    return tx * h.x + ty * h.y + n * h.z;
}

vec3 irradiance(vec3 direction) {
    vec4 irradiance = vec4(0.);

    for(float phi = 0.0; phi < 2.0 * PI; phi += sample_delta) {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sample_delta) {
            vec3 sample_vector = sample_hemisphere(phi, theta, direction);
            vec2 equirect_uv = sample_spherical_map(sample_vector);

            vec3 l = normalize(2.0 * dot(direction, sample_vector) * sample_vector - direction);
            float pdf = max(0., dot(direction, l) * INV_PI);

            vec2 tex_size = vec2(textureSize(sampler2D(equirect, Sampler), 0));
            float solid_angle_texel = 4. * PI / (tex_size.x * tex_size.y);
            float solid_angle_sample = 1.0 / (sample_count * pdf);
            float lod = 0.5 * log2(solid_angle_sample / solid_angle_texel);

            irradiance.rgb += textureLod(sampler2D(equirect, Sampler), equirect_uv, lod).rgb * sin(theta) * cos(theta);
            irradiance.w += 1.0;
        }
    }

    return PI * irradiance.rgb / sample_count;
}

void main() {
    ivec2 resolution = imageSize(cube);
    ivec3 idx = ivec3(gl_GlobalInvocationID);

    vec2 face_uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));
    vec3 direction = normalize(convert_cube_uv_to_xyz(int(gl_GlobalInvocationID.z), face_uv));

    vec3 irradiance = irradiance(direction);

    imageStore(cube, idx, vec4(irradiance, 1.));
}
