#version 460

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform Params {
    uint mode;
    float from_min;
    float from_max;
    float to_min;
    float to_max;
    int steps;
    uint clamp_output;
    uint smooth_edge;
};

layout(set = 0, binding = 1) uniform texture2D t_Color1;
layout(set = 0, binding = 2) uniform sampler Sampler;
layout(set = 0, binding = 3, r32f) uniform image2D t_Out;

const uint MODE_LINEAR = 0;
const uint MODE_SMOOTHSTEP = 1;
const uint MODE_SMOOTHERSTEP = 2;
const uint MODE_STEPPED = 3;

float smootherstep(float start, float end, float t) {
   t = max(0.0, min(1.0, (t - start) / (end - start)));
   return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float map_linear(float value) {
    return (value - from_min) / (from_max - from_min);
}

float map_smoothstep(float value) {
    return (from_min > from_max) ?
        1. - smoothstep(from_max, from_min, value) :
        smoothstep(from_min, from_max, value);
}

float map_smootherstep(float value) {
    return (from_min > from_max) ?
        1. - smootherstep(from_max, from_min, value) :
        smootherstep(from_min, from_max, value);
}

float map_stepped(float value) {
    float x = map_linear(value);
    return x > 0 ? floor(x * (steps + 1)) / steps : 0.;
}

float map_range(float value) {
    switch(mode) {
        case MODE_LINEAR:
            return map_linear(value);
        case MODE_SMOOTHSTEP:
            return map_smoothstep(value);
        case MODE_SMOOTHERSTEP:
            return map_smootherstep(value);
        case MODE_STEPPED:
            return map_stepped(value);
    }

    return 0.;
}

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(t_Out);
    vec2 uv = vec2(float(idx.x) / float(resolution.x), float(idx.y) / float(resolution.y));

    float factor = 0.;

    if(smooth_edge != 0) {
        vec2 sub_sample = 0.25 / vec2(resolution);

        for(int x = - 2; x <= 2; ++x) {
            for(int y = - 2; y <= 2; ++y) {
                vec2 uv_ = uv + vec2(x, y) * sub_sample;
                factor += map_range(texture(sampler2D(t_Color1, Sampler), uv_).r);
            }
        }
        factor /= 25.;
    } else {
        factor = map_range(texture(sampler2D(t_Color1, Sampler), uv).r);
    }

    float x = to_min + factor * (to_max - to_min);

    if (clamp_output != 0) {
        x = clamp(x, to_min, to_max);
    }

    vec4 res = vec4(x, x, x, 1.);

    imageStore(t_Out, idx, res);
}
